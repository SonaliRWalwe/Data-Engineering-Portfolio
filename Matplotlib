### link: https://pub.towardsai.net/10-advanced-matplotlib-concepts-you-must-know-to-create-killer-visuals-23aaf63c3d0c



# 1. . rcParams
from matplotlib import rcParams
>>> rcParams
...
'axes.grid': False,
'axes.grid.axis': 'both',
'axes.grid.which': 'major',
'axes.labelcolor': 'black',
'axes.labelpad': 4.0,
'axes.labelsize': 'medium',
'axes.labelweight': 'normal',
'axes.linewidth': 0.8,
...

rcParams['figure.figsize'] = 8, 6
rcParams['legend.fontsize'] = "large"
rcParams['xtick.major.size'] = 4
rcParams['xtick.minor.size'] = 1
>>> plt.rcdefaults()

#2. . get_* functions
fig, ax = plt.subplots()

>>> [func for func in dir(ax) if func.startswith("get")]

['get_adjustable',
 'get_label',
 'get_legend',
 'get_legend_handles_labels',
 'get_lines',
 'get_navigate',
 'get_title',
 'get_transform',
 'get_xmajorticklabels',
 'get_xminorticklabels',
 'get_xscale',
 'get_xticklabels',
 'get_zorder']

x = np.linspace(0, 2, 100)

fig, ax = plt.subplots()  # Create a figure and an axes.

l1 = ax.plot(x, x, label="linear")
l2 = ax.plot(x, x ** 2, label="quadratic")
l3 = ax.plot(x, x ** 3, label="cubic")

ax.set_title("Simple Plot")

plt.show()

  #It is easy, just call get_xticklabels on the axes object, and you get a list of Matplotlib Text instances:
>>> ax.get_xticklabels()

[Text(0, 0, 'Ideal'),
 Text(1, 0, 'Premium'),
 Text(2, 0, 'Very Good'),
 Text(3, 0, 'Good'),
 Text(4, 0, 'Fair')]


#3. . getp / setp
x = np.linspace(0, 2, 100)

fig, ax = plt.subplots()  # Create a figure and an axes.

l1 = ax.plot(x, x, label="linear")
l2 = ax.plot(x, x ** 2, label="quadratic")
l3 = ax.plot(x, x ** 3, label="cubic")

ax.set_title("Simple Plot")

plt.show()


>>> plt.getp(l2)
    ...
    drawstyle or ds = default
    figure = Figure(640x480)
    linestyle or ls = -
    linewidth or lw = 1.5
    marker = None
    markeredgecolor or mec = #ff7f0e
    markeredgewidth or mew = 1.0
    markerfacecolor or mfc = #ff7f0e
    markerfacecoloralt or mfcalt = none
    zorder = 2
    ...

>>> plt.setp(l2)
  ...
  linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}
  linewidth or lw: float
  sketch_params: (scale: float, length: float, randomness: float)
  snap: bool or None
  zorder: float
  ...
>>> plt.setp(l2, "linestyle")
linestyle: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}


>>> plt.setp(l2, linestyle="-.", lw=5, color="red", alpha=0.5)
[None, None, None, None]

>>> fig.get_figure()

#4.. Legends
x = np.linspace(0, 2, 100)

fig, ax = plt.subplots()  # Create a figure and an axes.

l1 = ax.plot(x, x, label="linear")
l2 = ax.plot(x, x ** 2, label="quadratic")
l3 = ax.plot(x, x ** 3, label="cubic")

ax.set_title("Simple Plot")

ax.legend()

plt.show()

#5. . cycler
from cycler import cycler

c1 = cycler(arg1=[1, 2, 3, 4])
>>> c1

c2 = cycler(arg2=list("rgba"))

for i in c2:
    print(i)

------------------------------

{'arg2': 'r'}
{'arg2': 'g'}
{'arg2': 'b'}
{'arg2': 'a'}

#----------------------------------
for i in c1 + c2:
    print(i)

--------------------------------

{'arg1': 1, 'arg2': 'r'}
{'arg1': 2, 'arg2': 'g'}
{'arg1': 3, 'arg2': 'b'}
{'arg1': 4, 'arg2': 'a'}

line_prop_cycler = (
    cycler(color=list("rgcy"))
    + cycler(ls=["-", "--", "-.", ":"])
    + cycler(lw=[3, 6, 9, 12])
)

x = np.linspace(0, 2 * np.pi, 50)
offsets = np.linspace(0, 2 * np.pi, 4, endpoint=False)
yy = np.transpose([np.sin(x + phi) for phi in offsets])

fig, ax = plt.subplots(figsize=(8, 4))

ax.set_prop_cycle(line_prop_cycler)  # Set propcycle before plotting
ax.plot(x, yy)

plt.show();

>>> rcParams["axes.prop_cycle"]

#6. tick_params
>>> ax.tick_params()

Parameters
----------
axis : {'x', 'y', 'both'}, default: 'both'
    The axis to which the parameters are applied.
which : {'major', 'minor', 'both'}, default: 'major'
    The group of ticks to which the parameters are applied.
reset : bool, default: False
    Whether to reset the ticks to defaults before updating them.

Other Parameters
----------------
direction : {'in', 'out', 'inout'}
    Puts ticks inside the axes, outside the axes, or both.
length : float
    Tick length in points.
width : float
    Tick width in points.
color : color
    Tick color.

fig, ax = plt.subplots(figsize=(3, 2))

>>> ax.minorticks_on()

#7. . Tickers

from matplotlib import ticker
dir(ticker)
['AutoLocator',
 'AutoMinorLocator',
 'EngFormatter',
 'FixedFormatter',
 'FixedLocator',
 'FormatStrFormatter',
 'Formatter',
 'FuncFormatter',
 'IndexFormatter',
 'IndexLocator',
 'Integral',
 'LinearLocator',
]

from matplotlib.ticker import EngFormatter

ax.xaxis.set_major_formatter(EngFormatter())

